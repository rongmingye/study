4.11
	早上 
		搭建好基本项目框架，可以显示出组件的内容
			reducers action  connect 
			router
	晚上
		写好内容组件和css,
		两个页面的静态页面基本写出
			PageCla PageStudent
		完成第一页面cla的静态组件 
			Side Lesson Cla Anlyse
			Top Choose Student
4.12
	早上
		完成第二个页面stuent的静态组件  
			StuInfo 
			StuHistory 
			StuCondition
	下午
		数据连接
		一个课程有n个班, 一个班有10名学生
		数据表
		id lesson cla studentName studentId

	晚上
		lesson -> cla -> students 组件数据连通
		数据的筛选
		express服务函数
		ajax获取初始数据的数据, 再去修改state.students

4.13
	早上 
		正确获取目标课程班级的学生
		默认是获取第一个课程 第一个班级
		每点击一个课程，返回第一个班级

	晚上
		side目标课程班级 active #3d4f60
		进度条Progress
		router 路由传值
		<Link to = {{pathname:"", hash:"", search:"", state:"" }}></Link>
4.14 
	早上
		对象动态添加属性
			obj[key]=key;

		url编码， 有中文时
			两次编码	path = encodeURI(encodeURI(path));
			两次解码	let data = decodeURI(decodeURI(window.location.search));

			原因：
				默认是escape()编码，只是为0-255做转换工作, 以外ASCII字符
				转换成的 %u**** 这样的码, 解码的时候

		url加码，加参数
			let search = "name="+this.props.name+"&id="+this.props.id;
			let path = "/PageStudent?"+search;
			path = encodeURI(encodeURI(path));
			

		跳转解码，解参数
				// 解析跳转过来的url
				getRequestInfo(){
					let data = decodeURI(decodeURI(window.location.search));
					data = data.split("?")[1];
					data = data.split("&");
					let obj = {};
					
					let key, val;
					for(var i=0; i<data.length; i++){
						key = data[i].split("=")[0];
						val = data[i].split("=")[1];
					 	obj[key] = val;
					}
					return obj;
				
				}
				let obj = this.getRequestInfo();
4.16
	晚上
		组件标签设置样式对象
			let bar = { width: 80% }
			<Progress style={bar}/> 

4.18	
	早上
		PageAnlyse.js 组件
		从数据库拿到目标课程和班级的所有项目
		Cla组件里触发Ajax()，成功后返回dispatch(result)
		PageAnlyse 直接拿到state.curProjects, 然后根据项目名显示该项目的每条问题的分析

4.19 
	早上
		PageSetProject.js 组件
		展示项目 setProject-left
		展示项目问题setProject-right
		
		设置项目问题，根据目标课程

	下午
		添加项目： 根据目标课程 班级 
		添加问题： 根据目标课程 班级 项目

		获取数据库的数据修改store.state:
			 onClick -> handClick() -> ajax() -> dispatch

4.24
	晚上
		搞定数据库
		问题处理
		数据分析

4.27	
	发布到github

4.28 发布到阿里云
		server.js
			host: 0.0.0.0
			port: 3000
		导进study1.sql到阿里云


